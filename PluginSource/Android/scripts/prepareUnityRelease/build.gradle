apply from: '../scripts/generateManifest/build.gradle'

ext {
	publishDir = "${project.rootDir}/publish"
	manifestsTempDir = "$publishDir/manifests"
	readmeFilesDir = "${project.rootDir}/readme"
	unityActivitiesAndroidManifestPath = "${project.rootDir}/scripts/prepareUnityRelease"

	publicManifestPath = file("$publishDir/AndroidManifest.xml")
	manifestsPath = manifestsTempDir
}

task cleanPublishDir {
	doLast {file(publishDir).deleteDir()}
}

task copyAndroidManifests {
	doLast {
		copy {
			from(unityActivitiesAndroidManifestPath) {
				include "UnityActivitiesAndroidManifest.xml"
				rename "UnityActivitiesAndroidManifest.xml", "unity-activities"
			}
			into manifestsTempDir
		}
	}
}

task unzipJarForExcludedLibs {
	doLast {
		List excludeLibsPattern = new ArrayList()
		exludePermissionsLibs.each {
			excludeLibsPattern.add("$it*.aar")
		}
		fileTree(dir: publishDir, includes: excludeLibsPattern)
				.each {
					File file = it

					copy {
						from(zipTree(file)) {
							include "classes.jar"
							rename "classes.jar", "${file.name.substring(0, file.name.lastIndexOf(".aar"))}.jar"
						}
						into publishDir
					}

					file.delete()
				}
	}
}

task removeAndroidManifests {
	doLast {
		file(manifestsPath).deleteDir()
	}
}

task copyUnityPluginAar {
	doLast {
		def buildType = 'release'
		def buildDir = file("${project.buildDir}/outputs/aar/")

		copy {
			from(buildDir)
					{
						include "${project.name}-${buildType}.aar"
						rename "${project.name}-${buildType}.aar", "${project.name}-${global_versionName}.aar"
					}
			into publishDir
		}
	}
}

task copyReadmeFiles {
	doLast {
		copy {
			from readmeFilesDir
			into publishDir
		}
	}
}

copyAndroidManifests.dependsOn cleanPublishDir
generatePublicAndroidManifest.dependsOn copyAndroidManifests
removeAndroidManifests.dependsOn generatePublicAndroidManifest
copyUnityPluginAar.dependsOn removeAndroidManifests
copyReadmeFiles.dependsOn copyUnityPluginAar
assemble.dependsOn copyReadmeFiles