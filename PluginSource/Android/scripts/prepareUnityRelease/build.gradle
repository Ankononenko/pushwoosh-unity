apply from: '../scripts/generateManifest/build.gradle'

ext {
	publishDir = "${project.rootDir}/publish"
	manifestsTempDir = "$publishDir/manifests"
	readmeFilesDir = "${project.rootDir}/readme"
	unityActivitiesAndroidManifestPath = "${project.rootDir}/scripts/prepareUnityRelease"

	publicManifestPath = file("$publishDir/AndroidManifest.xml")
	manifestsPath = manifestsTempDir
	exludePermissionsLibs = ["pushwoosh-location",
	                         "pushwoosh-beacon"]
}

task cleanPublishDir << {
	file(publishDir).deleteDir()
}

task copyPushwooshDependency << {
	project.configurations
			.compile
			.resolvedConfiguration
			.resolvedArtifacts.each {
		def id = it.moduleVersion.getId();
		def path = file(it.file)

		if (checkGroup(id)) {
			copy {
				from(path.parent) {
					include "*.aar"
				}
				into publishDir
			}
		}

	}
}

boolean checkGroup(ModuleVersionIdentifier id) {
	def version = id.version
	def group = id.group
	def expectedVersion

	switch (group) {
		case "com.android.support":
			expectedVersion = support
			break
		case "com.google.android.gms":
			expectedVersion = play_services
			break
		case "com.pushwoosh":
			expectedVersion = pushwoosh
			break
		case "Android":
			return false
		default:
			throw new IllegalArgumentException("Unknown group: ${group}")
	}

	if (version != expectedVersion) {
		throw new IllegalArgumentException("Incorrect version for group $group. Expected version is $expectedVersion but current is $version")
	}

	return true
}

task copyExcludedJars << {

	def libs = "${project.projectDir}/libs"
	copy {
		from(libs) {
			include "*.jar"
		}
		into publishDir
	}
}

task copyAndroidManifests << {
	List excludeLibsPattern = new ArrayList();
	exludePermissionsLibs.each {
		excludeLibsPattern.add("$it*.aar")
	}
	fileTree(dir: publishDir, includes: excludeLibsPattern)
			.each {
		def path = it.path
		def name = it.name.substring(0, it.name.lastIndexOf("-"))

		copy {
			from(zipTree(path)) {
				include "AndroidManifest.xml"
				rename "AndroidManifest.xml", "${name}"
			}
			into manifestsTempDir
		}
	}

	copy {
		from(unityActivitiesAndroidManifestPath) {
			include "UnityActivitiesAndroidManifest.xml"
			rename "UnityActivitiesAndroidManifest.xml", "unity-activities"
		}
		into manifestsTempDir
	}
}

task unzipJarForExcludedLibs << {
	List excludeLibsPattern = new ArrayList();
	exludePermissionsLibs.each {
		excludeLibsPattern.add("$it*.aar")
	}
	fileTree(dir: publishDir, includes: excludeLibsPattern)
			.each {
		File file = it

		copy {
			from(zipTree(file)) {
				include "classes.jar"
				rename "classes.jar", "${file.name.substring(0, file.name.lastIndexOf(".aar"))}.jar"
			}
			into publishDir
		}

		file.delete()
	}
}

task removeAndroidManifests << {
	file(manifestsPath).deleteDir()
}

task copyUnityPluginAar << {
	def buildType = 'release'
	def buildDir = file("${project.buildDir}/outputs/aar/")

	copy {
		from(buildDir)
				{
					include "${project.name}-${buildType}.aar"
					rename "${project.name}-${buildType}.aar", "${project.name}-${global_versionName}.aar"
				}
		into publishDir
	}
}

task copyReadmeFiles << {
	copy {
		from readmeFilesDir
		into publishDir
	}
}

copyPushwooshDependency.dependsOn cleanPublishDir
copyAndroidManifests.dependsOn copyPushwooshDependency
generatePublicAndroidManifest.dependsOn copyAndroidManifests
unzipJarForExcludedLibs.dependsOn generatePublicAndroidManifest
removeAndroidManifests.dependsOn unzipJarForExcludedLibs
copyUnityPluginAar.dependsOn removeAndroidManifests
copyReadmeFiles.dependsOn copyUnityPluginAar
assemble.dependsOn copyReadmeFiles